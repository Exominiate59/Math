#!/usr/bin/env node

const flags = {
    '-t': translation,
    '-z': scaling,
    '-r': rotation,
    '-s': reflection,
    '-h': help,
};

function reflection(args)
{
    let x = parseFloat(args[0]);
    let y = parseFloat(args[1]);
    let theta = parseFloat(args[3]) * (Math.PI / 180);
    let cos = Math.cos(2 * theta);
    let sin = Math.sin(2 * theta);

    console.log(`Reflection over an axis with an inclination angle of ${args[3]} degrees`);
    console.log(`${cos.toFixed(2)}\t${sin.toFixed(2)}\t0.00`);
    console.log(`${sin.toFixed(2)}\t${(-cos).toFixed(2)}\t0.00`);
    console.log(`0.00\t0.00\t1.00`);
    process.stdout.write(`(${x.toFixed(2)}, ${y.toFixed(2)}) => `);
    process.stdout.write(`(${(x * cos + y * sin).toFixed(2)},`);
    process.stdout.write(` ${(x * sin - y * cos).toFixed(2)})\n`);
}

function scaling(args)
{
    let nb1 = parseFloat(args[0]) * parseFloat(args[3]);
    let nb2 = parseFloat(args[1]) * parseFloat(args[4]);

    console.log(`Scaling by factors ${args[3]} and ${args[4]}`);
    console.log(`${parseFloat(args[3]).toFixed(2)}\t0.00\t0.00`);
    console.log(`0.00\t${parseFloat(args[3]).toFixed(2)}\t0.00`);
    console.log(`0.00\t0.00\t1.00`);
    process.stdout.write(`(${parseFloat(args[0]).toFixed(2)}, `);
    process.stdout.write(`${parseFloat(args[1]).toFixed(2)})`);
    process.stdout.write(` => `);
    process.stdout.write(`(${(nb1).toFixed(2)}, `);
    process.stdout.write(`${(nb2).toFixed(2)})\n`);
}

function translation(args)
{
    let nb1 = parseFloat(args[0]) + parseFloat(args[3]);
    let nb2 = parseFloat(args[1]) + parseFloat(args[4]);

    console.log(`Translation along vector (${args[3]}, ${args[4]})`);
    console.log(`1.00\t0.00\t${parseFloat(args[3]).toFixed(2)}`);
    console.log(`0.00\t1.00\t${parseFloat(args[4]).toFixed(2)}`);
    console.log(`0.00\t0.00\t1.00`);
    process.stdout.write(`(${parseFloat(args[0]).toFixed(2)}, `);
    process.stdout.write(`${parseFloat(args[1]).toFixed(2)})`)
    process.stdout.write(" => ");
    process.stdout.write(`(${nb1.toFixed(2)}, `);
    process.stdout.write(`${nb2.toFixed(2)})`);
    console.log("");
}

function help()
{
    console.log("USAGE");
    console.log("    ./102architect x y transfo1 arg11 [arg12] [transfo2 arg21 [arg22]] ...\n\n");
    console.log("DESCRIPTION");
    console.log("    x   abscissa of the original point");
    console.log("    y   ordinate of the original point");
    console.log("    transfo arg1 [arg2]");
    console.log("    -t i j  translation along vector (i, j)");
    console.log("    -z m n  scaling by factors m (x-axis) and n (y-axis)");
    console.log("    -r d    rotation centered in O by a d degree angle");
    console.log("    -s d    reflection over the axis passing through O with an inclination");
    console.log("            angle of d degrees");
}

function main()
{
    const args = process.argv.slice(2);

    for (let i = 0; i < args.length; i++) {
        if (flags[args[i]])
            flags[args[i]](args);
    }
}

main();